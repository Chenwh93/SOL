import networkx
import httplib2
import json
from sol.optimization.topology.extracttopo import ExtractTopo
import networkx as nx
import matplotlib.pyplot as plt
#from requests import Request, Session

class OpenDayLightController(object):
    
    def __init__(self, uid='admin',password='admin',
                 controllerIP='localhost',
                 controllerPort = '8080'):
        
        self.httpreq =  httplib2.Http(".cache")
        self.httpreq.add_credentials(uid, password)
        self.controllerIP = controllerIP
        self.controllerPort = controllerPort
        self.odlurl = 'http://'+controllerIP+':'+controllerPort+'/controller/nb/v2/'
        self.topo = ExtractTopo()
        self.G = self.topo.getGraph(self.controllerIP)
    
    def generateAllPaths(self,pptc,optPaths):
        
        ''' Generates ODL Compatible Paths
        trafficClasses: All traffic classes generated by SOL, Eg :-
        {'volBytes': 100000, 'src': 4, 'volFlows': 500, 'srcAppPorts': None, 'dst': 3, 
        'cpuCost': 10, 'priority': 1, 'dstAppPorts': None, 'srcIPPrefix': None, 
        'dstIPPrefix': None, 'ID': 15, 'name': 'Everything'}
        
        paths: All sol optimized paths per traffic class. All paths for each traffic class is stored at index 'trafficClasses'
        Eg :- paths[tc] = {'nodes': [4, 1, 3], 'numFlows': 1.0, 'useMBoxes': [1, 3], 'PathWithMbox': True} where tc in trafficClasses 
        '''
        optPath=[]
        paths = []
        for tc,path in pptc.iteritems():
            paths.append(optPaths[tc][0]._nodes)
        return paths
        
    def pushODLPath(self,pptc,optPaths):
        
        paths = self.generateAllPaths(pptc, optPaths)
        for j,path in enumerate(paths):
            print path
            for i,node in enumerate(path):
                flowName = 'Dipayan_Path%d_%d'%(j,i)
                srcNode = path[0]
                dstNode = path[-1]
                #TODO: Find host connected port of every node
                if node == srcNode:
                    ingressPort = 1
                else:
                    ingressPort = self.G.edge[path[i-1]][node]['dstport']
                    
                if node == dstNode:
                    egressPort = 1
                else:
                    egressPort = self.G.edge[node][path[i+1]]['srcport']
                
                newFlow = self.buildFlow(flowName,node,str(ingressPort),str(egressPort),srcNode,dstNode)
                switchType = 'OF'
                postUrl = self.odlurl + 'flowprogrammer/default/node/' + switchType +'/'+ newFlow['node']['id'] +'/'+'staticFlow/'+flowName
                resp, content = self.postFlow(postUrl,newFlow)
                #print content
    
        print "All paths installed!"
        
    
    def buildFlow(self,flowName,node,ingressPort,egressPort,srcNode,dstNode):
        srcIp = '10.0.0.'+str(srcNode)
        dstIp = '10.0.0.'+str(dstNode)
        defaultPriority = "500"
        newFlow = {'installInHw':'true'}
        newFlow.update({'name' : flowName})
        newFlow.update({'node' : {'type' : 'OF', 'id' : self.G.node[node]['mac']}})
        newFlow.update({'ingressPort' : ingressPort, 'priority' : defaultPriority})
        newFlow.update({'nwDst' : dstIp, 'nwSrc' : srcIp})
        newFlow.update({'actions':['OUTPUT=%s'%egressPort]})
        newFlow.update({'etherType': '0x800'})
        #print json.dumps(newFlow,indent=4)
        return newFlow
    
    def postFlow(self,postUrl,newFlow):
        resp,content = self.httpreq.request(uri = postUrl,
                                            method = 'PUT',
                                            body = json.dumps(newFlow), 
                                            headers = {'content-type' : 'application/json'}) 
        return resp,content
        
    def delAllFlows(self):
        url = self.odlurl + 'switchmanager/default/nodes'
        resp,content = self.httpreq.request(url,'GET')
        content = json.loads(content)
        nodeObjects = content['nodeProperties']
        nodeList=[]
        for node in nodeObjects:
            nodeList.append(node['node']['id'])
            
        for node in nodeList:
            url = self.odlurl + 'flowprogrammer/default/node/OF/' + node
            resp,content = self.httpreq.request(url, 'GET')
            allFlows = json.loads(content)
            flows = allFlows['flowConfig']
            for fs in flows:
                flowName = fs['name']
                delUrl = url + '/staticFlow/' + flowName
                resp, content = self.httpreq.request(delUrl, "DELETE")
                #print content
        print "All flows deleted!"
        
    def main(self):
        #G = self.getTopologyGraph()
        #print G.edges(data=True)
        #plt.show(nx.draw(G))
        self.delAllFlows()
if __name__ == "__main__":
    controller = OpenDayLightController()
    controller.main() 